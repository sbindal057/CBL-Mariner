# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

parameters:
  - name: buildRepoRoot
    type: string
    default: "$(Build.SourcesDirectory)"

  - name: concurrentPackageBuilds
    type: number
    default: 12

  - name: customToolchainArtifactName
    type: string
    default: ""

  - name: customToolchainTarballName
    type: string
    default: "toolchain_built_rpms_all.tar.gz"

  - name: extraPackageRepos
    type: string
    default: ""

  - name: failOnTestFailures
    type: boolean
    default: true

  - name: isCheckBuild
    type: string
    default: "default"
    values:
      - "default"
      - "false"
      - "true"

  - name: isDeltaBuild
    type: string
    default: "default"
    values:
      - "default"
      - "false"
      - "true"

  - name: isQuickRebuildPackages
    type: string
    default: "default"
    values:
      - "default"
      - "false"
      - "true"

  - name: isUseCCache
    type: string
    default: "default"
    values:
      - "default"
      - "false"
      - "true"

  - name: outputArtifactsFolder
    type: string
    default: "$(Build.ArtifactStagingDirectory)"

  - name: pipArtifactFeeds
    type: string
    default: ""

  - name: publishLogs
    type: boolean
    default: true

  - name: rpmsCacheArtifactName
    type: string
    default: ""

  - name: rpmsCacheTarballName
    type: string
    default: "rpms.tar.gz"

  - name: rpmsTarballName
    type: string
    default: "rpms.tar.gz"

  - name: selfRepoName
    type: string
    default: "CBL-Mariner"

  - name: specsFolderPath
    type: string
    default: "SPECS"

  - name: srpmPackList
    type: string
    default: ""

  - name: srpmsTarballName
    type: string
    default: "srpms.tar.gz"

steps:
  - template: ToolkitCheck.yml@${{ parameters.selfRepoName }}
    parameters:
      buildRepoRoot: ${{ parameters.buildRepoRoot }}

  - ${{ if parameters.customToolchainArtifactName }}:
      - task: DownloadPipelineArtifact@2
        displayName: "Download toolchain"
        inputs:
          artifact: "${{ parameters.customToolchainArtifactName }}"
          patterns: "**/${{ parameters.customToolchainTarballName }}"

      - script: |
          toolchain_archive="$(find "$(Pipeline.Workspace)" -name "${{ parameters.customToolchainTarballName }}" -print -quit)"
          if [[ ! -f "$toolchain_archive" ]]; then
            echo "ERROR: toolchain archive not found!" >&2
            exit 1
          fi

          sudo make -C "${{ parameters.buildRepoRoot }}/toolkit" toolchain TOOLCHAIN_ARCHIVE="$toolchain_archive"
        displayName: "Populate toolchain"

  - ${{ if parameters.rpmsCacheArtifactName }}:
      - task: DownloadPipelineArtifact@2
        displayName: "Download RPM cache"
        inputs:
          artifact: "${{ parameters.rpmsCacheArtifactName }}"
          patterns: "**/${{ parameters.rpmsCacheTarballName }}"

      - script: |
          rpms_archive="$(find "$(Pipeline.Workspace)" -name "${{ parameters.rpmsCacheTarballName }}" -print -quit)"
          if [[ ! -f "$rpms_archive" ]]; then
            echo "ERROR: RPMs cache archive not found!" >&2
            exit 1
          fi

          sudo make -C "${{ parameters.buildRepoRoot }}/toolkit" hydrate-cached-rpms CACHED_PACKAGES_ARCHIVE="$rpms_archive"
        displayName: "Populate RPMs cache"

  - script: |
      if [[ ${{ parameters.isDeltaBuild }} == "true" ]]; then
        delta_fetch_arg="DELTA_FETCH=y"
      elif [[ ${{ parameters.isDeltaBuild }} == "false" ]]; then
        delta_fetch_arg="DELTA_FETCH=n"
      fi

      if [[ ${{ parameters.isQuickRebuildPackages }} == "true" ]]; then
        quick_rebuild_packages_arg="QUICK_REBUILD_PACKAGES=y"
      elif [[ ${{ parameters.isQuickRebuildPackages }} == "false" ]]; then
        quick_rebuild_packages_arg="QUICK_REBUILD_PACKAGES=n"
      fi

      if [[ ${{ parameters.isCheckBuild }} == "true" ]]; then
        run_check_arg="RUN_CHECK=y"
      elif [[ ${{ parameters.isCheckBuild }} == "false" ]]; then
        run_check_arg="RUN_CHECK=n"
      fi

      if [[ ${{ parameters.isUseCCache }} == "true" ]]; then
        use_ccache_arg="USE_CCACHE=y"
      elif [[ ${{ parameters.isUseCCache }} == "false" ]]; then
        use_ccache_arg="USE_CCACHE=n"
      fi

      sudo make -C "${{ parameters.buildRepoRoot }}/toolkit" build-packages -j$(nproc) \
        CONCURRENT_PACKAGE_BUILDS=${{ parameters.concurrentPackageBuilds }} \
        CONFIG_FILE="" \
        REBUILD_TOOLS=y \
        REPO_LIST="${{ parameters.extraPackageRepos }}" \
        SPECS_DIR="${{ parameters.buildRepoRoot }}/${{ parameters.specsFolderPath }}" \
        SRPM_PACK_LIST="${{ parameters.srpmPackList }}" \
        $delta_fetch_arg \
        $quick_rebuild_packages_arg \
        $run_check_arg \
        $use_ccache_arg
    displayName: "Build packages"

  - ${{ if parameters.outputArtifactsFolder }}:
      - ${{ if parameters.rpmsTarballName }}:
          - script: |
              sudo make -C "${{ parameters.buildRepoRoot }}/toolkit" compress-rpms
            displayName: "Compress RPMs"

          - bash: |
              published_artifacts_dir="${{ parameters.outputArtifactsFolder }}/ARTIFACTS"
              mkdir -p "$published_artifacts_dir"
              cp "${{ parameters.buildRepoRoot }}"/out/rpms.tar.gz "$published_artifacts_dir/${{ parameters.rpmsTarballName }}"
            displayName: "Copy RPMs for publishing"

      - ${{ if parameters.srpmsTarballName }}:
          - script: |
              sudo make -C "${{ parameters.buildRepoRoot }}/toolkit" compress-srpms
            displayName: "Compress SRPMs"

          - bash: |
              published_artifacts_dir="${{ parameters.outputArtifactsFolder }}/ARTIFACTS"
              mkdir -p "$published_artifacts_dir"
              cp "${{ parameters.buildRepoRoot }}"/out/srpms.tar.gz "$published_artifacts_dir/${{ parameters.srpmsTarballName }}"
            displayName: "Copy SRPMs for publishing"

      - ${{ if parameters.publishLogs }}:
          - bash: |
              published_logs_dir="${{ parameters.outputArtifactsFolder }}/LOGS"
              mkdir -p "$published_logs_dir"
              tar -C "${{ parameters.buildRepoRoot }}/build/logs/pkggen" -czf "$published_logs_dir/pkggen.logs.tar.gz" .
              tar -C "${{ parameters.buildRepoRoot }}/build/pkg_artifacts" -czf "$published_logs_dir/pkg_artifacts.tar.gz" .
              tar -C "${{ parameters.buildRepoRoot }}/build/timestamp" -czf "$published_logs_dir/timestamp.tar.gz" .
            condition: always()
            displayName: "Copy logs for publishing"

  - ${{ if parameters.isCheckBuild }}:
      - template: PackageTestResultsAnalysis.yml@${{ parameters.selfRepoName }}
        parameters:
          buildRepoRoot: ${{ parameters.buildRepoRoot }}
          failOnTestFailures: ${{ parameters.failOnTestFailures }}
          outputArtifactsFolder: ${{ parameters.outputArtifactsFolder }}
          pipArtifactFeeds: ${{ parameters.pipArtifactFeeds }}
